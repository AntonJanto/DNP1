@page "/todos"
@using AdvancedTodo.Data
@using AdvancedTodo.Models
@inject ITodoService TodoService
@inject NavigationManager NavigationManager

<div class="d-flex justify-content-between">
    <h1>Todo List</h1>
    <p class="btn btn-primary my-auto rounded p-1 shadow" @onclick="GoToAddTodo">
        Add new Todo
    </p>
</div>

<p>
    Filter by User Id: <input type="number" @oninput="@((arg) => FilterByUserId(arg))" style="width:50px" />
</p>
<p>
    Filter by completed status:
    <select class="form-control selectpicker" @onchange="@((arg) => FilterByCompletedStatus(arg))" style="width:100px">
        <option>Both</option>
        <option>False</option>
        <option>True</option>
    </select>
</p>

@if (allTodos == null)
{
    <p class="text-center card shadow"><em>Loading...</em></p>
}
else if (!allTodos.Any())
{
    <p class="text-center card shadow"><em>No todo items. Please add some.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>User ID</th>
                <th>Todo ID</th>
                <th>Title</th>
                <th>Competed</th>
                <th>Remove</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in showTodos)
            {
                <tr>
                    <td>@item.UserID</td>
                    <td>@item.TodoID</td>
                    <td>@item.Title</td>
                    <td>
                        <input type="checkbox" checked=@item.IsCompleted
                               @onchange="@((arg) => CompletedChange(arg, item))">
                    </td>
                    <td>
                        <button @onclick="@(() => RemoveTodo(item))">
                            <span class="oi oi-x" style="color:red" />
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private IList<Todo> allTodos;
    private IList<Todo> showTodos;

    private int? filterByUserId;
    private bool? filterByIsCompleted;

    protected override async Task OnInitializedAsync()
    {
        allTodos =  await TodoService.GetTodosAsync();
        showTodos = allTodos;
    }

    private void FilterByUserId(ChangeEventArgs evt)
    {
        filterByUserId = null;
        try
        {
            filterByUserId = int.Parse(evt.Value.ToString());
        }
        catch (Exception)
        {
            filterByUserId = null;
        }
        ExecuteFilter();
    }

    private void FilterByCompletedStatus(ChangeEventArgs evt)
    {
        filterByIsCompleted = null;
        try
        {
            filterByIsCompleted = bool.Parse(evt.Value.ToString());
        }
        catch (Exception)
        {
            filterByIsCompleted = null;
        }
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        showTodos = allTodos.Where(t =>
        (filterByUserId != null && t.UserID == filterByUserId || filterByUserId == null) &&
        (filterByIsCompleted != null && t.IsCompleted == filterByIsCompleted || filterByIsCompleted == null)).ToList();
    }

    private async void RemoveTodo(Todo todo)
    {
        Todo todoToRemove = allTodos.First(t => t.TodoID == todo.TodoID);
        await TodoService.RemoveTodoAsync(todo);
        allTodos.Remove(todoToRemove);
    }

    private async void CompletedChange(ChangeEventArgs evt, Todo todo)
    {
        todo.IsCompleted = (bool)evt.Value;
        await TodoService.UpdateTodoAsync(todo);
    }


    private void GoToAddTodo()
    {
        NavigationManager.NavigateTo("/add-todo");
    }

}
