@page "/register"

@using DNP_FamilyOverview1.Data.Authentication.Impl

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<AuthorizeView>
    <Authorized>You are already registered</Authorized>
    <NotAuthorized>
        <h2>Register</h2>
        <div class="container">
            <!--username-->
            <div class=" form-group mt-3">
                <label for="username">Username:</label>
                <input type="text" class="form-control" id="username" @bind-value="@username" />
            </div>
            <!--password-->
            <div class="form-group">
                <label for="password">Password:</label>
                <input type="password" class="form-control" id="password" @bind-value="@password" />
            </div>
            <!--password again-->
            <div class="form-group">
                <label for="passwordagain">Password again:</label>
                <input type="password" class="form-control" id="passwordagain" @bind-value="@passwordAgain" />
            </div>
            <span style="color:red">@errorMessage</span>
            <button class="btn btn-primary" @onclick="PerformRegisterAsync">Register</button>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {

    private string username;
    private string password;
    private string passwordAgain;
    private string errorMessage;

    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        var user = (await AuthState).User;
        if (user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
            await JSRuntime.InvokeAsync<string>("alert", "Already logged in.");
        }
    }

    private async Task PerformRegisterAsync()
    {
        errorMessage = "";
        try
        {
            await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).ValidateRegisterAsync(username, password, passwordAgain);
            username = "";
            password = "";
            passwordAgain = "";
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }
}
