@page "/families"

@using DNP_FamilyOverview1.Models.Families
@using DNP_FamilyOverview1.Data.Families

@inject IFamilyService FamilyService
@inject NavigationManager NavigationManager


<div class="d-flex justify-content-between">
    <h2>Families</h2>
    <AuthorizeView Policy="Create">
        <button class="btn btn-primary my-auto rounded p-1 shadow" @onclick="GoToStartAFamily">
            Start a new family
        </button>
    </AuthorizeView>
</div>



<div>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Family</th>
                <th>Street</th>
                <th>HouseNumber</th>
                <th>Family members</th>
                <AuthorizeView Policy="Delete">
                    <th>Remove</th>
                </AuthorizeView>
            </tr>
        </thead>
        <tbody>
            @foreach (var family in allFamilies)
            {
                <tr>
                    <td>@(family.Adults.Count > 0 ? family.Adults.First().LastName : "")</td>
                    <td>@family.StreetName</td>
                    <td>@family.HouseNumber</td>
                    <td>@family.TotalFamilyMembers()</td>
                    <AuthorizeView Policy="Delete">
                        <td><span class="oi oi-circle-x" @onclick="() => RemoveFamily(family)" /></td>
                    </AuthorizeView>
                </tr>
            }
        </tbody>
    </table>
</div>


@code {
    private IList<Family> allFamilies;

    protected override void OnInitialized()
    {
        allFamilies = FamilyService.GetFamilies();
    }

    private void GoToStartAFamily()
    {
        NavigationManager.NavigateTo("/startafamily");
    }

    private void RemoveFamily(Family toRemove)
    {
        if (FamilyService.RemoveFamily(toRemove))
        {
            allFamilies.Remove(toRemove);
        }
    }
}
