@page "/adults/{streetname}"
@page "/adults"

@using DNP_FamilyOverview1.Models.Families
@using DNP_FamilyOverview1.Data.Families

@inject NavigationManager NavigationManager
@inject IFamilyService FamilyService

<div class="d-flex justify-content-between">
    <h2>Adults</h2>
    <AuthorizeView Policy="Create">
        <button class="btn btn-primary my-auto rounded p-1 shadow" @onclick="GoToStartAFamily">
            Add adult
        </button>
    </AuthorizeView>
</div>

<h4 class="text-right">Filters</h4>
<div class="row">
    <div class="col-sm mb-1" />
    <div class="col-sm mb-1">
        <input type="text" placeholder="First name" class="form-control" @oninput="@((arg) => FilterByFirstName(arg))" />
    </div>
    <div class="col-sm mb-1">
        <input type="text" placeholder="Last name" class="form-control" @oninput="@((arg) => FilterByLastName(arg))" />
    </div>
</div>

<div>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>First name</th>
                <th>Last name</th>
                <th>Hair Color</th>
                <th>Eye Color</th>
                <th>Age</th>
                <th>Weight</th>
                <th>Height</th>
                <th>Sex</th>
                <th>Job</th>
                <AuthorizeView Policy="Delete">
                    <th>Remove</th>
                </AuthorizeView>
            </tr>
        </thead>
        @if (displayedAdults != null)
        {
            <tbody>
                @foreach (var adult in displayedAdults)
                {
                    <tr>
                        <td>@adult.FirstName</td>
                        <td>@adult.LastName</td>
                        <td>@adult.HairColor</td>
                        <td>@adult.EyeColor</td>
                        <td>@adult.Age</td>
                        <td>@adult.Weight</td>
                        <td>@adult.Height</td>
                        <td>@adult.Sex</td>
                        <td>@adult.JobTitle</td>
                        <AuthorizeView Policy="Delete">
                            <td><span class="oi oi-circle-x" @onclick="() => RemoveAdult(adult)" /></td>
                        </AuthorizeView>
                    </tr>
                }

            </tbody>
        }
        else
        {
            <h2>Loading...</h2>
        }
    </table>
</div>

@code {
    private IList<Family> allFamilies;
    private IList<Adult> displayedAdults;

    private string? filterByLastName;
    private string? filterByFirstName;

    private string? streetName = "";
    [Parameter]
    public string StreetName
    {
        get => streetName;
        set => streetName = value?.Replace("_", " ");
    }


    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        allFamilies = await FamilyService.GetFamiliesAsync();
        displayedAdults =  ActOnAdultsInAllFamilies((family, adult) => true);
        if (NavigationManager.Uri.Contains("/adults/"))
            FilterByStreetName();
    }

    //Methods
    private void GoToStartAFamily()
    {
        NavigationManager.NavigateTo("/startafamily");
    }

    private async Task RemoveAdult(Adult toRemove)
    {
        var removed = await FamilyService.RemoveAdultAsync(toRemove);
        if (removed)
        {
            ActOnAdultsInAllFamilies((family, adult) =>
            {
                if (adult.Id == toRemove.Id)
                {
                    family.Adults.Remove(adult);
                }
                return false;
            });
        }
    }

    private void FilterByFirstName(ChangeEventArgs arg)
    {
        filterByFirstName = null;

        try
        {
            filterByFirstName = arg.Value.ToString().ToLower();
            filterByFirstName = filterByFirstName == "" ? null : filterByFirstName;
        }
        catch (Exception)
        {
            filterByFirstName = null;
        }
        ExecuteFilter();
    }

    private void FilterByLastName(ChangeEventArgs arg)
    {
        filterByLastName = null;

        try
        {
            filterByLastName = arg.Value.ToString().ToLower();
            filterByLastName = filterByLastName == "" ? null : filterByLastName;
        }
        catch (Exception)
        {
            filterByLastName = null;
        }
        ExecuteFilter();
    }

    private void FilterByStreetName()
    {
        if (StreetName == "")
            StreetName = null;

        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        displayedAdults = ActOnAdultsInAllFamilies((family, adult) =>
            (filterByLastName != null && adult.LastName.ToLower().Contains(filterByLastName) || filterByLastName == null) &&
            (filterByFirstName != null && adult.FirstName.ToLower().Contains(filterByFirstName) || filterByFirstName == null) &&
            (streetName != null && family.StreetName.ToLower().Contains(streetName.ToLower()) || streetName == null)
        );
    }

    //Delegate experiment
    private delegate bool AdultsInFamiliesAction(Family family, Adult adult);

    private IList<Adult> ActOnAdultsInAllFamilies(AdultsInFamiliesAction action)
    {
        IList<Adult> result = new List<Adult>();

        foreach (var family in allFamilies)
        {
            foreach (var adult in family.Adults)
            {
                if (action(family, adult))
                {
                    result.Add(adult);
                }
            }
        }
        return result;
    }
}
